{"version":3,"file":"static/js/952.b60f7f66.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/errorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/MainPage.js","components/hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\"\r\nimport ErrorMessage from \"../errorMessage/errorMessage\"\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo)\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\treturn <ErrorMessage />\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import img from \"./error.gif\"\r\nimport { Component } from \"react\"\r\n\r\nclass ErrorMessage extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<img\r\n\t\t\t\tsrc={img}\r\n\t\t\t\talt='error'\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: \"block\",\r\n\t\t\t\t\twidth: \"250px\",\r\n\t\t\t\t\theight: \"250px\",\r\n\t\t\t\t\tobjectFit: \"contain\",\r\n\t\t\t\t\tmargin: \"0 auto\"\r\n\t\t\t\t}}></img>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ErrorMessage\r\n","import \"./randomChar.scss\"\nimport mjolnir from \"../../resources/img/mjolnir.png\"\nimport useMarvelService from \"../../services/MarvelService\"\nimport Spinner from \"../spinner/Spinner\"\nimport ErrorMessage from \"../errorMessage/errorMessage\"\nimport { useState, useEffect } from \"react\"\n\nconst RandomChar = () => {\n\tconst [char, setChar] = useState(null)\n\n\tconst { loading, error, getCharacter, clearError } = useMarvelService()\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t\tconst timer = setInterval(updateChar, 3000)\n\t\treturn () => {\n\t\t\tclearInterval(timer)\n\t\t}\n\t}, [])\n\n\tfunction startTimer() {}\n\n\tconst onCharLoaded = char => {\n\t\tsetChar(char)\n\t}\n\n\tfunction updateChar() {\n\t\tclearError()\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n\t\tgetCharacter(id).then(onCharLoaded)\n\t}\n\n\tconst onTryIt = () => {\n\t\tupdateChar()\n\t}\n\n\tconst errorMessage = error ? <ErrorMessage /> : null\n\tconst content = !loading && !error && char ? <View char={char} /> : null\n\tconst spinner = loading ? <Spinner /> : null\n\n\treturn (\n\t\t<div className='randomchar'>\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className='randomchar__static'>\n\t\t\t\t<p className='randomchar__title'>\n\t\t\t\t\tRandom character for today!\n\t\t\t\t\t<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className='randomchar__title'>Or choose another one</p>\n\t\t\t\t<button className='button button__main' onClick={onTryIt}>\n\t\t\t\t\t<div className='inner'>try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt='mjolnir' className='randomchar__decoration' />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst View = ({ char }) => {\n\tconst notExist =\n\t\t\"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n\n\tconst style =\n\t\tchar.thumbnail === notExist\n\t\t\t? { objectFit: \"contain\" }\n\t\t\t: { objectFit: \"cover\" }\n\n\treturn (\n\t\t<div className='randomchar__block'>\n\t\t\t<img\n\t\t\t\tstyle={style}\n\t\t\t\tsrc={char.thumbnail}\n\t\t\t\talt={char.name}\n\t\t\t\tclassName='randomchar__img'\n\t\t\t/>\n\t\t\t<div className='randomchar__info'>\n\t\t\t\t<p className='randomchar__name'>{char.name}</p>\n\t\t\t\t<p className='randomchar__descr'>{char.description}</p>\n\t\t\t\t<div className='randomchar__btns'>\n\t\t\t\t\t<a href='#' className='button button__main'>\n\t\t\t\t\t\t<div className='inner'>homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href='#' className='button button__secondary'>\n\t\t\t\t\t\t<div className='inner'>Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar\n","import \"./charList.scss\"\nimport useMarvelService from \"../../services/MarvelService\"\nimport Spinner from \"../spinner/Spinner\"\nimport ErrorMessage from \"../errorMessage/errorMessage\"\nimport PropTypes from \"prop-types\"\nimport { useState, useEffect, useRef } from \"react\"\n\nconst CharList = props => {\n\tconst [charList, setCharList] = useState([])\n\tconst [offset, setOffset] = useState(210)\n\tconst [newItemLoading, setNewItemLoading] = useState(false)\n\tconst [charEnded, setCharEnded] = useState(false)\n\n\tconst { loading, error, getAllCharacters } = useMarvelService()\n\tconst itemsRef = useRef([])\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true)\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true)\n\n\t\tgetAllCharacters(offset).then(onCharListLoaded)\n\t}\n\n\tconst onCharListLoaded = charListData => {\n\t\tlet ended = false\n\t\tif (charListData.length < 9) {\n\t\t\tended = true\n\t\t}\n\t\tsetCharList(charList => [...charList, ...charListData])\n\t\tsetOffset(offset => offset + 9)\n\t\tsetNewItemLoading(false)\n\t\tsetCharEnded(CharEnded => ended)\n\t}\n\n\tconst onCharFocused = id => {\n\t\titemsRef.current.forEach(item =>\n\t\t\titem.classList.remove(\"char__item_selected\")\n\t\t)\n\t\titemsRef.current[id].classList.add(\"char__item_selected\")\n\t\titemsRef.current[id].focus()\n\t}\n\n\tfunction renderItems(arr) {\n\t\tconst notExist =\n\t\t\t\"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n\t\tconst items = arr.map((item, i) => {\n\t\t\tconst style =\n\t\t\t\titem.thumbnail === notExist\n\t\t\t\t\t? { objectFit: \"contain\" }\n\t\t\t\t\t: { objectFit: \"cover\" }\n\t\t\treturn (\n\t\t\t\t<li\n\t\t\t\t\tclassName='char__item'\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\t// el is the link to the real dom element\n\t\t\t\t\tref={el => (itemsRef.current[i] = el)}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\tonCharFocused(i)\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyDown={e => {\n\t\t\t\t\t\tif (e.key === \" \" || e.key === \"Enter\") {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\t\tonCharFocused(i)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}>\n\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={style} />\n\t\t\t\t\t<div className='char__name'>{item.name}</div>\n\t\t\t\t</li>\n\t\t\t)\n\t\t})\n\n\t\treturn <ul className='char__grid'>{items}</ul>\n\t}\n\n\tconst elements = renderItems(charList)\n\n\tconst errorMessage = error ? <ErrorMessage /> : null\n\tconst spinner = loading && !newItemLoading ? <Spinner /> : null\n\n\treturn (\n\t\t<div className='char__list'>\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{elements}\n\t\t\t<button\n\t\t\t\tclassName='button button__main button__long'\n\t\t\t\tonClick={() => onRequest(offset)}\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{ display: charEnded ? \"none\" : \"block\" }}>\n\t\t\t\t<div className='inner'>load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired\n}\nexport default CharList\n","import \"./skeleton.scss\"\n\nconst Skeleton = () => {\n\treturn (\n\t\t<>\n\t\t\t<p className='char__select'>\n\t\t\t\tPlease select a character to see information\n\t\t\t</p>\n\t\t\t<div className='skeleton'>\n\t\t\t\t<div className='pulse skeleton__header'>\n\t\t\t\t\t<div className='pulse skeleton__circle'></div>\n\t\t\t\t\t<div className='pulse skeleton__mini'></div>\n\t\t\t\t</div>\n\t\t\t\t<div className='pulse skeleton__block'></div>\n\t\t\t\t<div className='pulse skeleton__block'></div>\n\t\t\t\t<div className='pulse skeleton__block'></div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default Skeleton\n","import \"./charInfo.scss\"\nimport Skeleton from \"../skeleton/Skeleton\"\nimport ErrorMessage from \"../errorMessage/errorMessage\"\nimport Spinner from \"../spinner/Spinner\"\nimport useMarvelService from \"../../services/MarvelService\"\nimport { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst CharInfo = ({ selectedChar }) => {\n\tconst [char, setChar] = useState(null)\n\tconst [limitComics, setLimitComics] = useState(10)\n\n\tconst { loading, error, getCharacter, clearError } = useMarvelService()\n\n\tuseEffect(() => {\n\t\tupdateChar(selectedChar)\n\t}, [selectedChar])\n\n\tconst charLoaded = char => {\n\t\tsetChar(() => char)\n\t}\n\n\tconst updateChar = id => {\n\t\tclearError()\n\t\tif (!selectedChar) {\n\t\t\treturn\n\t\t}\n\n\t\tgetCharacter(id).then(charLoaded)\n\t}\n\n\tconst spinner = loading ? <Spinner /> : null\n\tconst errorMessage = error ? <ErrorMessage /> : null\n\tconst content = !(error || loading || !char) ? (\n\t\t<View char={char} limitComics={limitComics} />\n\t) : null\n\tconst skeleton = char || loading || error ? null : <Skeleton />\n\n\treturn (\n\t\t<div className='char__info'>\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t{skeleton}\n\t\t</div>\n\t)\n}\n\nconst View = ({ limitComics, char }) => {\n\tconst getComicsElements = arr => {\n\t\tconst comicsElements = []\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (i === limitComics) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcomicsElements[i] = (\n\t\t\t\t<li key={i} className='char__comics-item'>\n\t\t\t\t\t{arr[i].name}\n\t\t\t\t</li>\n\t\t\t)\n\t\t}\n\t\treturn comicsElements\n\t}\n\n\tconst { name, description, thumbnail, homepage, wiki, comics } = char\n\n\tconst notExist =\n\t\t\"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n\n\tconst style =\n\t\tthumbnail === notExist ? { objectFit: \"contain\" } : { objectFit: \"cover\" }\n\n\treturn (\n\t\t<>\n\t\t\t<div className='char__basics'>\n\t\t\t\t<img src={thumbnail} alt={name} style={style} />\n\t\t\t\t<div>\n\t\t\t\t\t<div className='char__info-name'>{name}</div>\n\t\t\t\t\t<div className='char__btns'>\n\t\t\t\t\t\t<a href={homepage} className='button button__main'>\n\t\t\t\t\t\t\t<div className='inner'>homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className='button button__secondary'>\n\t\t\t\t\t\t\t<div className='inner'>wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='char__descr'>{description}</div>\n\t\t\t<div className='char__comics'>Comics:</div>\n\t\t\t<ul className='char__comics-list'>\n\t\t\t\t{comics.length > 0 ? null : \"There is no comics with this character\"}\n\t\t\t\t{getComicsElements(comics)}\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nCharInfo.propTypes = {\n\tselectedChar: PropTypes.number\n}\nexport default CharInfo\n","import RandomChar from \"../randomChar/RandomChar\"\r\nimport CharList from \"../charList/CharList\"\r\nimport CharInfo from \"../charInfo/CharInfo\"\r\nimport decoration from \"../../resources/img/vision.png\"\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\r\nimport { useState } from \"react\"\r\n\r\nconst MainPage = () => {\r\n\tconst [selectedChar, setSelectedChar] = useState(null)\r\n\r\n\tconst onCharSelected = id => {\r\n\t\tsetSelectedChar(id)\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className='char__content'>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharInfo selectedChar={selectedChar} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</div>\r\n\t\t\t<img className='bg-decoration' src={decoration} alt='vision' />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage\r\n","import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n\tconst [error, setError] = useState(null)\r\n\tconst [loading, setLoading] = useState(false)\r\n\r\n\tconst request = useCallback(\r\n\t\tasync (\r\n\t\t\turl,\r\n\t\t\tmethod = \"GET\",\r\n\t\t\tbody = null,\r\n\t\t\theaders = { \"Content-Type\": \"application/json\" }\r\n\t\t) => {\r\n\t\t\tsetLoading(true)\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(url, { method, body, headers })\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n\t\t\t\t}\r\n\t\t\t\tconst data = await response.json()\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t\treturn data\r\n\t\t\t} catch (e) {\r\n\t\t\t\tsetError(e.message)\r\n\t\t\t\tthrow e\r\n\t\t\t}\r\n\t\t},\r\n\t\t[]\r\n\t)\r\n\tconst clearError = useCallback(() => setError(null), [])\r\n\treturn { error, loading, request, clearError }\r\n}\r\n","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\nconst useMarvelService = () => {\r\n\tconst { loading, request, error, clearError } = useHttp()\r\n\r\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\"\r\n\tconst _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\"\r\n\tconst _baseOffset = 210\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getCharacter = async id => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n\t\treturn _transformCharacter(res.data.results[0])\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComic = async id => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst _transformCharacter = char => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.title,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: \"There is no description for this character\",\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\tconst _transformComics = comics => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\"\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tclearError,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t}\r\n}\r\n\r\nexport default useMarvelService\r\n"],"names":["ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","_jsx","ErrorMessage","props","children","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","char","thumbnail","_jsxs","className","name","description","href","RandomChar","setChar","useState","loading","getCharacter","clearError","useMarvelService","useEffect","updateChar","timer","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","content","spinner","Spinner","onClick","onTryIt","mjolnir","charList","setCharList","offset","setOffset","newItemLoading","setNewItemLoading","charEnded","setCharEnded","getAllCharacters","itemsRef","useRef","onRequest","initial","onCharListLoaded","charListData","ended","length","CharEnded","onCharFocused","current","forEach","item","classList","remove","add","focus","elements","arr","items","map","i","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","Skeleton","_Fragment","_ref2","limitComics","homepage","wiki","comics","comicsElements","getComicsElements","selectedChar","setLimitComics","charLoaded","skeleton","MainPage","setSelectedChar","CharList","CharInfo","decoration","request","useHttp","setError","setLoading","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","message","_apiBase","_apiKey","_transformCharacter","title","slice","path","extension","urls","_transformComics","_comics$textObjects$","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}