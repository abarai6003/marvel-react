{"version":3,"file":"static/js/670.9e86643c.chunk.js","mappings":"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","sources":["components/errorMessage/errorMessage.js","components/pages/SingleComicPage.js","components/hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\"\r\nimport { Component } from \"react\"\r\n\r\nclass ErrorMessage extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<img\r\n\t\t\t\tsrc={img}\r\n\t\t\t\talt='error'\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: \"block\",\r\n\t\t\t\t\twidth: \"250px\",\r\n\t\t\t\t\theight: \"250px\",\r\n\t\t\t\t\tobjectFit: \"contain\",\r\n\t\t\t\t\tmargin: \"0 auto\"\r\n\t\t\t\t}}></img>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ErrorMessage\r\n","import { useParams, Link } from \"react-router-dom\"\r\nimport \"./SingleComicPage.scss\"\r\nimport ErrorMessage from \"../errorMessage/errorMessage\"\r\nimport Spinner from \"../spinner/Spinner\"\r\nimport useMarvelService from \"../../services/MarvelService\"\r\nimport { useState, useEffect } from \"react\"\r\n\r\nconst SingleComicPage = () => {\r\n\tconst { comicId } = useParams()\r\n\tconst [comic, setComic] = useState(null)\r\n\tconst { loading, error, getComic, clearError } = useMarvelService()\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateComic(comicId)\r\n\t}, [comicId])\r\n\r\n\tconst onComicLoaded = comic => {\r\n\t\tsetComic(comic)\r\n\t}\r\n\r\n\tconst updateComic = () => {\r\n\t\tclearError()\r\n\t\tgetComic(comicId).then(onComicLoaded)\r\n\t}\r\n\r\n\tconst errorMessage = error ? <ErrorMessage /> : null\r\n\tconst spinner = loading ? <Spinner /> : null\r\n\tconst content = !(error || loading || !comic) ? <View comic={comic} /> : null\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{errorMessage}\r\n\t\t\t{spinner}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst View = ({ comic }) => {\r\n\tconst { title, description, pageCount, thumbnail, language, price } = comic\r\n\treturn (\r\n\t\t<div className='single-comic'>\r\n\t\t\t<img src={thumbnail} alt={title} className='single-comic__img' />\r\n\t\t\t<div className='single-comic__info'>\r\n\t\t\t\t<h2 className='single-comic__name'>{title}</h2>\r\n\t\t\t\t<p className='single-comic__descr'>{description}</p>\r\n\t\t\t\t<p className='single-comic__descr'>{pageCount}</p>\r\n\t\t\t\t<p className='single-comic__descr'>Language: {language}</p>\r\n\t\t\t\t<div className='single-comic__price'>{price}</div>\r\n\t\t\t</div>\r\n\t\t\t<Link to='/comics' className='single-comic__back'>\r\n\t\t\t\tBack to all\r\n\t\t\t</Link>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SingleComicPage\r\n","import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n\tconst [error, setError] = useState(null)\r\n\tconst [loading, setLoading] = useState(false)\r\n\r\n\tconst request = useCallback(\r\n\t\tasync (\r\n\t\t\turl,\r\n\t\t\tmethod = \"GET\",\r\n\t\t\tbody = null,\r\n\t\t\theaders = { \"Content-Type\": \"application/json\" }\r\n\t\t) => {\r\n\t\t\tsetLoading(true)\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(url, { method, body, headers })\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n\t\t\t\t}\r\n\t\t\t\tconst data = await response.json()\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t\treturn data\r\n\t\t\t} catch (e) {\r\n\t\t\t\tsetError(e.message)\r\n\t\t\t\tthrow e\r\n\t\t\t}\r\n\t\t},\r\n\t\t[]\r\n\t)\r\n\tconst clearError = useCallback(() => setError(null), [])\r\n\treturn { error, loading, request, clearError }\r\n}\r\n","import { useHttp } from \"../components/hooks/http.hook\"\r\n\r\nconst useMarvelService = () => {\r\n\tconst { loading, request, error, clearError } = useHttp()\r\n\r\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\"\r\n\tconst _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\"\r\n\tconst _baseOffset = 210\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getCharacter = async id => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n\t\treturn _transformCharacter(res.data.results[0])\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComic = async id => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst _transformCharacter = char => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.title,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: \"There is no description for this character\",\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\tconst _transformComics = comics => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\"\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tclearError,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t}\r\n}\r\n\r\nexport default useMarvelService\r\n"],"names":["ErrorMessage","Component","render","_jsx","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","onComicLoaded","then","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setError","setLoading","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}